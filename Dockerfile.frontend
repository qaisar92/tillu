# Multi-stage build for Next.js applications
FROM node:18-alpine AS base

# Install dependencies only when needed
FROM base AS deps
RUN apk add --no-cache libc6-compat
WORKDIR /app

# Copy package files
COPY package.json pnpm-lock.yaml* ./
COPY packages/shared/package.json ./packages/shared/
COPY packages/ui/package.json ./packages/ui/

# Install pnpm and dependencies
RUN npm install -g pnpm
RUN pnpm install --frozen-lockfile

# Rebuild the source code only when needed
FROM base AS builder
WORKDIR /app
COPY . .

# Build argument to specify which app to build
ARG APP_NAME
ENV APP_NAME=${APP_NAME}

# Build the specific application
RUN npm install -g pnpm
RUN pnpm install --frozen-lockfile
RUN pnpm build --filter=@tillu/${APP_NAME}

# Production image, copy all the files and run next
FROM base AS runner
WORKDIR /app

ENV NODE_ENV production

RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# Build argument to specify which app to run
ARG APP_NAME
ENV APP_NAME=${APP_NAME}

# Copy built application
COPY --from=builder /app/apps/${APP_NAME}/.next/standalone ./
COPY --from=builder /app/apps/${APP_NAME}/.next/static ./apps/${APP_NAME}/.next/static
COPY --from=builder /app/apps/${APP_NAME}/public ./apps/${APP_NAME}/public

USER nextjs

EXPOSE 3000

ENV PORT 3000

CMD ["node", "apps/${APP_NAME}/server.js"]
